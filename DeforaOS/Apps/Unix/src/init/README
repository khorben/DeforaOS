Description
-----------
"init" is the first program launched by a unix kernel. It is the parent of all
processes, and its role is to handle the initialization of the user-land
system.
The system may run in any of init's 8 runlevels:
	0		system is halting
	1		system is in single user mode
	2 to 5		system is in multiple user mode
	6		system is rebooting
	s and S		system is initializing
	
init is also in charge of the /var/run/utmp and /var/log/wtmp files, storing
there how and why any of its child processes how they terminate.


Existing implementations
------------------------
There are two major conceptions of the init system: BSD and System V style.
* BSD style
  - one script per runlevel
  - impossible to use the script to alter the behaviour of a running daemon
* System V style
  - one directory per runlevel, containing a collection of scripts to run in
    order
  - easy to alter or track running daemons, but the coherence of the interface
    is not provided at all

The scripts basically contain commands to launch.


Caveats of the existing implementations
---------------------------------------
In current systems it is impossible to:
- launch multiple independant services concurrently
- alter and track the behaviour of running services easily and coherently
- handle services' processes in a proper manner (eg: when halting the system,
  properly shut them down instead of just waiting 2 seconds and then kill -9,
  and not still waiting while all have already exited)


Conception proposal
-------------------
- consider runlevels as "profiles", these ones being reserved:
  . halt
  . reboot
  . single
  . multiuser
- consider every system task or daemon as a "service"
- a service is either:
  . a command to launch (default in /usr/libexec/init/ ?)
  . a daemon to launch (default in /usr/sbin ?)
- a service may depend upon the successful launch of another one
- a service provides itself
- a service may provide aliases for its task
- have one file per service in say /etc/init directory
- organize these files as defined in the Config class of libutils
  . global section contains global definitions
  . each section corresponds to a profile

