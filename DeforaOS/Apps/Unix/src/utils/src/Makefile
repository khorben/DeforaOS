TARGETS	= basename cat chgrp chmod chown cmp cp dirname du echo false head id kill link ln logname ls mkdir mkfifo pwd rmdir sleep strings test time touch true tty uname uniq unlink wc
CFLAGSF	= -W -Wall -ansi
CFLAGS	= -g
CC	= cc
AR	= ar rc
RANLIB	= ranlib
LD	= ld -shared
RM	= rm -f


all: $(TARGETS)

basename_OBJS= basename.o
basename_CFLAGS=$(CFLAGSF) $(CFLAGS)
basename: $(basename_OBJS)
	$(CC) $(LDFLAGSF) $(LDFLAGS) -o basename $(basename_OBJS)

basename.o: basename.c
	$(CC) $(basename_CFLAGS) -c basename.c

cat_OBJS= cat.o
cat_CFLAGS=$(CFLAGSF) $(CFLAGS)
cat: $(cat_OBJS)
	$(CC) $(LDFLAGSF) $(LDFLAGS) -o cat $(cat_OBJS)

cat.o: cat.c
	$(CC) $(cat_CFLAGS) -c cat.c

chgrp_OBJS= chgrp.o
chgrp_CFLAGS=$(CFLAGSF) $(CFLAGS)
chgrp: $(chgrp_OBJS)
	$(CC) $(LDFLAGSF) $(LDFLAGS) -o chgrp $(chgrp_OBJS)

chgrp.o: chgrp.c
	$(CC) $(chgrp_CFLAGS) -c chgrp.c

chmod_OBJS= chmod.o
chmod_CFLAGS=$(CFLAGSF) $(CFLAGS)
chmod: $(chmod_OBJS)
	$(CC) $(LDFLAGSF) $(LDFLAGS) -o chmod $(chmod_OBJS)

chmod.o: chmod.c
	$(CC) $(chmod_CFLAGS) -c chmod.c

chown_OBJS= chown.o
chown_CFLAGS=$(CFLAGSF) $(CFLAGS)
chown: $(chown_OBJS)
	$(CC) $(LDFLAGSF) $(LDFLAGS) -o chown $(chown_OBJS)

chown.o: chown.c
	$(CC) $(chown_CFLAGS) -c chown.c

cmp_OBJS= cmp.o
cmp_CFLAGS=$(CFLAGSF) $(CFLAGS)
cmp: $(cmp_OBJS)
	$(CC) $(LDFLAGSF) $(LDFLAGS) -o cmp $(cmp_OBJS)

cmp.o: cmp.c
	$(CC) $(cmp_CFLAGS) -c cmp.c

cp_OBJS= cp.o
cp_CFLAGS=$(CFLAGSF) $(CFLAGS)
cp: $(cp_OBJS)
	$(CC) $(LDFLAGSF) $(LDFLAGS) -o cp $(cp_OBJS)

cp.o: cp.c
	$(CC) $(cp_CFLAGS) -c cp.c

dirname_OBJS= dirname.o
dirname_CFLAGS=$(CFLAGSF) $(CFLAGS)
dirname: $(dirname_OBJS)
	$(CC) $(LDFLAGSF) $(LDFLAGS) -o dirname $(dirname_OBJS)

dirname.o: dirname.c
	$(CC) $(dirname_CFLAGS) -c dirname.c

du_OBJS= du.o
du_CFLAGS=$(CFLAGSF) $(CFLAGS)
du: $(du_OBJS)
	$(CC) $(LDFLAGSF) $(LDFLAGS) -o du $(du_OBJS)

du.o: du.c
	$(CC) $(du_CFLAGS) -c du.c

echo_OBJS= echo.o
echo_CFLAGS=$(CFLAGSF) $(CFLAGS)
echo: $(echo_OBJS)
	$(CC) $(LDFLAGSF) $(LDFLAGS) -o echo $(echo_OBJS)

echo.o: echo.c
	$(CC) $(echo_CFLAGS) -c echo.c

false_OBJS= false.o
false_CFLAGS=$(CFLAGSF) $(CFLAGS)
false: $(false_OBJS)
	$(CC) $(LDFLAGSF) $(LDFLAGS) -o false $(false_OBJS)

false.o: false.c
	$(CC) $(false_CFLAGS) -c false.c

head_OBJS= head.o
head_CFLAGS=$(CFLAGSF) $(CFLAGS)
head: $(head_OBJS)
	$(CC) $(LDFLAGSF) $(LDFLAGS) -o head $(head_OBJS)

head.o: head.c
	$(CC) $(head_CFLAGS) -c head.c

id_OBJS= id.o
id_CFLAGS=$(CFLAGSF) $(CFLAGS)
id: $(id_OBJS)
	$(CC) $(LDFLAGSF) $(LDFLAGS) -o id $(id_OBJS)

id.o: id.c
	$(CC) $(id_CFLAGS) -c id.c

kill_OBJS= kill.o
kill_CFLAGS=$(CFLAGSF) $(CFLAGS)
kill: $(kill_OBJS)
	$(CC) $(LDFLAGSF) $(LDFLAGS) -o kill $(kill_OBJS)

kill.o: kill.c
	$(CC) $(kill_CFLAGS) -c kill.c

link_OBJS= link.o
link_CFLAGS=$(CFLAGSF) $(CFLAGS)
link: $(link_OBJS)
	$(CC) $(LDFLAGSF) $(LDFLAGS) -o link $(link_OBJS)

link.o: link.c
	$(CC) $(link_CFLAGS) -c link.c

ln_OBJS= ln.o
ln_CFLAGS=$(CFLAGSF) $(CFLAGS)
ln: $(ln_OBJS)
	$(CC) $(LDFLAGSF) $(LDFLAGS) -o ln $(ln_OBJS)

ln.o: ln.c
	$(CC) $(ln_CFLAGS) -c ln.c

logname_OBJS= logname.o
logname_CFLAGS=$(CFLAGSF) $(CFLAGS)
logname: $(logname_OBJS)
	$(CC) $(LDFLAGSF) $(LDFLAGS) -o logname $(logname_OBJS)

logname.o: logname.c
	$(CC) $(logname_CFLAGS) -c logname.c

ls_OBJS= ls.o
ls_CFLAGS=$(CFLAGSF) $(CFLAGS)
ls: $(ls_OBJS)
	$(CC) $(LDFLAGSF) $(LDFLAGS) -o ls $(ls_OBJS)

ls.o: ls.c
	$(CC) $(ls_CFLAGS) -c ls.c

mkdir_OBJS= mkdir.o
mkdir_CFLAGS=$(CFLAGSF) $(CFLAGS)
mkdir: $(mkdir_OBJS)
	$(CC) $(LDFLAGSF) $(LDFLAGS) -o mkdir $(mkdir_OBJS)

mkdir.o: mkdir.c
	$(CC) $(mkdir_CFLAGS) -c mkdir.c

mkfifo_OBJS= mkfifo.o
mkfifo_CFLAGS=$(CFLAGSF) $(CFLAGS)
mkfifo: $(mkfifo_OBJS)
	$(CC) $(LDFLAGSF) $(LDFLAGS) -o mkfifo $(mkfifo_OBJS)

mkfifo.o: mkfifo.c
	$(CC) $(mkfifo_CFLAGS) -c mkfifo.c

pwd_OBJS= pwd.o
pwd_CFLAGS=$(CFLAGSF) $(CFLAGS)
pwd: $(pwd_OBJS)
	$(CC) $(LDFLAGSF) $(LDFLAGS) -o pwd $(pwd_OBJS)

pwd.o: pwd.c
	$(CC) $(pwd_CFLAGS) -c pwd.c

rmdir_OBJS= rmdir.o
rmdir_CFLAGS=$(CFLAGSF) $(CFLAGS)
rmdir: $(rmdir_OBJS)
	$(CC) $(LDFLAGSF) $(LDFLAGS) -o rmdir $(rmdir_OBJS)

rmdir.o: rmdir.c
	$(CC) $(rmdir_CFLAGS) -c rmdir.c

sleep_OBJS= sleep.o
sleep_CFLAGS=$(CFLAGSF) $(CFLAGS)
sleep: $(sleep_OBJS)
	$(CC) $(LDFLAGSF) $(LDFLAGS) -o sleep $(sleep_OBJS)

sleep.o: sleep.c
	$(CC) $(sleep_CFLAGS) -c sleep.c

strings_OBJS= strings.o
strings_CFLAGS=$(CFLAGSF) $(CFLAGS)
strings: $(strings_OBJS)
	$(CC) $(LDFLAGSF) $(LDFLAGS) -o strings $(strings_OBJS)

strings.o: strings.c
	$(CC) $(strings_CFLAGS) -c strings.c

test_OBJS= test.o
test_CFLAGS=$(CFLAGSF) $(CFLAGS)
test: $(test_OBJS)
	$(CC) $(LDFLAGSF) $(LDFLAGS) -o test $(test_OBJS)

test.o: test.c
	$(CC) $(test_CFLAGS) -c test.c

time_OBJS= time.o
time_CFLAGS=$(CFLAGSF) $(CFLAGS)
time: $(time_OBJS)
	$(CC) $(LDFLAGSF) $(LDFLAGS) -o time $(time_OBJS)

time.o: time.c
	$(CC) $(time_CFLAGS) -c time.c

touch_OBJS= touch.o
touch_CFLAGS=$(CFLAGSF) $(CFLAGS)
touch: $(touch_OBJS)
	$(CC) $(LDFLAGSF) $(LDFLAGS) -o touch $(touch_OBJS)

touch.o: touch.c
	$(CC) $(touch_CFLAGS) -c touch.c

true_OBJS= true.o
true_CFLAGS=$(CFLAGSF) $(CFLAGS)
true: $(true_OBJS)
	$(CC) $(LDFLAGSF) $(LDFLAGS) -o true $(true_OBJS)

true.o: true.c
	$(CC) $(true_CFLAGS) -c true.c

tty_OBJS= tty.o
tty_CFLAGS=$(CFLAGSF) $(CFLAGS)
tty: $(tty_OBJS)
	$(CC) $(LDFLAGSF) $(LDFLAGS) -o tty $(tty_OBJS)

tty.o: tty.c
	$(CC) $(tty_CFLAGS) -c tty.c

uname_OBJS= uname.o
uname_CFLAGS=$(CFLAGSF) $(CFLAGS)
uname: $(uname_OBJS)
	$(CC) $(LDFLAGSF) $(LDFLAGS) -o uname $(uname_OBJS)

uname.o: uname.c
	$(CC) $(uname_CFLAGS) -c uname.c

uniq_OBJS= uniq.o
uniq_CFLAGS=$(CFLAGSF) $(CFLAGS)
uniq: $(uniq_OBJS)
	$(CC) $(LDFLAGSF) $(LDFLAGS) -o uniq $(uniq_OBJS)

uniq.o: uniq.c
	$(CC) $(uniq_CFLAGS) -c uniq.c

unlink_OBJS= unlink.o
unlink_CFLAGS=$(CFLAGSF) $(CFLAGS)
unlink: $(unlink_OBJS)
	$(CC) $(LDFLAGSF) $(LDFLAGS) -o unlink $(unlink_OBJS)

unlink.o: unlink.c
	$(CC) $(unlink_CFLAGS) -c unlink.c

wc_OBJS= wc.o
wc_CFLAGS=$(CFLAGSF) $(CFLAGS)
wc: $(wc_OBJS)
	$(CC) $(LDFLAGSF) $(LDFLAGS) -o wc $(wc_OBJS)

wc.o: wc.c
	$(CC) $(wc_CFLAGS) -c wc.c


clean:
	$(RM) $(basename_OBJS) $(cat_OBJS) $(chgrp_OBJS) $(chmod_OBJS) $(chown_OBJS) $(cmp_OBJS) $(cp_OBJS) $(dirname_OBJS) $(du_OBJS) $(echo_OBJS) $(false_OBJS) $(head_OBJS) $(id_OBJS) $(kill_OBJS) $(link_OBJS) $(ln_OBJS) $(logname_OBJS) $(ls_OBJS) $(mkdir_OBJS) $(mkfifo_OBJS) $(pwd_OBJS) $(rmdir_OBJS) $(sleep_OBJS) $(strings_OBJS) $(test_OBJS) $(time_OBJS) $(touch_OBJS) $(true_OBJS) $(tty_OBJS) $(uname_OBJS) $(uniq_OBJS) $(unlink_OBJS) $(wc_OBJS)

distclean: clean
	$(RM) $(TARGETS)
