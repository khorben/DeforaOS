DESCRIPTION
-----------
This idea is from a good friend of mine, he confessed it in a recent discussion we had about web browsing security. This is the main motivation for this project, though it may be useful for a web browser rendering engine.
You won't learn anything if I say that most current web browsers, even the open sourced ones, have flaws. One of the trickiest parts of a browser, thus one of the most error prone, is the web pages parsing engine. There are also thousands of issues once it comes to user-side code execution, from javascript to ActiveX.
The concept here is a web proxy, which ensures the delivered data to be:
- a valid HTML or XHTML page when delivering some
- possibly modified, scanned, or removed, when delivering executable code or archives
Concerning web pages deliveries, the proxy may work in 3 modes:
- strict mode: only valid pages are delivered, else the output is a simple error page
- validator mode: only valid pages are delivered, else the output is equivalent to a web page validator (or the output is always equivalent to a validator's)
- full mode: valid pages are delivered as usual, other pages are processed and modified to adhere to the most appropriate HTML/XHTML standard


DESIGN
------
The first part of the program is the proxy code. It includes:
- HTTP engine
- optional FTP engine
- cache handling ('better cache modified pages instead of the originals of course; there is one case where caching the original page too is useful though: the web server doesn't tell if the page has changed, and it hasn't => diff with the cached page)

...

Then, the parsing code:
- HTML/XHTML recognition
- difficult, but killer feature: sending the page as it is parsed, not just when fully parsed

...


TODO
----
- get the RFCs for HTTP 1.0 and HTTP 1.1 proxying
- try a few proxies to understand the mandatory features
- get the DTDs for XHTML all versions
- think about how to handle HTML 1.0 through 4.02 pages
- see if any existing XML lib can already parse incorrect data

For DeforaOS:
- I already wanted to write a XML lib
- I already had the idea of a tolerant XML parsing lib, to use in a web rendering widget I'd create too (for my own browser :o) )

Fast proof of concept:
- only accept XHTML pages
- use libxml2 for parsing
- reproduce code from XML tree
=> first evaluation of performance
